{"version":3,"sources":["store/loading.ts","store/initial.ts","store/error.ts","store/posts.ts","helpers/api.ts","store/index.ts","components/Load/Load.tsx","components/Comments/CommentItem.tsx","components/Comments/CommentList.tsx","components/PostList/PostItem.tsx","components/PostList/PostList.tsx","components/Search/Search.tsx","helpers/debounce.ts","App.tsx","index.tsx"],"names":["reducer","loading","action","type","initial","errorMessage","setPosts","posts","map","post","id","postId","comments","filter","comment","commentId","API_URL","getData","url","a","fetch","response","json","rootReducer","combineReducers","initialReducer","loadingReducer","errordReducer","postReducer","isLoading","state","isLoaded","getPosts","store","createStore","composeWithDevTools","applyMiddleware","thunk","Load","dispatch","useDispatch","useSelector","className","cn","onClick","Promise","all","users","preparedPosts","user","find","userId","disabled","CommentItem","name","email","body","deleteComment","CommentList","key","PostItem","title","author","username","PostList","location","useLocation","query","URLSearchParams","search","get","toLowerCase","searchedPosts","useMemo","replace","includes","Search","history","useHistory","searchParams","useState","visibleQuery","setVisibleQuery","updateQuery","useCallback","f","delay","timerId","clearTimeout","args","window","setTimeout","debounce","actualQuery","delete","set","push","toString","placeholder","value","onChange","e","target","App","loaded","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba092b9d.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst INITIAL = 'INITIAL';\n\nexport const setLoaded = () => ({ type: INITIAL });\n\nconst reducer = (initial = false, action: AnyAction) => {\n  switch (action.type) {\n    case INITIAL:\n      return true;\n\n    default:\n      return initial;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\n\nexport const setErrorMessage = (errorMessage: string) => ({\n  type: SET_ERROR_MESSAGE,\n  errorMessage,\n});\n\nconst reducer = (errorMessage = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_ERROR_MESSAGE:\n      return action.errorMessage;\n\n    default:\n      return errorMessage;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setPosts = (posts: Post[]) => ({\n  type: SET_POSTS,\n  posts,\n});\n\nexport const deleteComment = (postId: number, commentId: number) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    case DELETE_COMMENT:\n      return posts.map((post: Post) => {\n        if (post.id === action.postId) {\n          return {\n            ...post,\n            comments: post.comments?.filter(comment => comment.id !== action.commentId),\n          };\n        }\n\n        return post;\n      });\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nexport async function getData<T>(url: string): Promise<T[]> {\n  const response = await fetch(`${API_URL}/${url}`);\n  const json = await response.json();\n\n  return json;\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport initialReducer, { setLoaded } from './initial';\nimport errordReducer, { setErrorMessage } from './error';\nimport postReducer, { setPosts, deleteComment } from './posts';\nimport { getData } from '../helpers/api';\n\nconst rootReducer = combineReducers({\n  initial: initialReducer,\n  loading: loadingReducer,\n  errorMessage: errordReducer,\n  posts: postReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const isLoaded = (state: RootState) => state.initial;\nexport const getError = (state: RootState) => state.errorMessage;\nexport const getPosts = (state: RootState) => state.posts;\nexport { deleteComment };\n\nexport const loadPosts = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const [posts, users, comments] = await Promise.all([\n        getData<PostFromServer>('posts.json'),\n        getData<User>('users.json'),\n        getData<Comment>('comments.json'),\n      ]);\n\n      const preparedPosts = posts.map((post: Post) => ({\n        ...post,\n        user: users.find((user: User) => user.id === post.userId),\n        comments: comments.filter((comment: Comment) => comment.postId === post.id),\n      }));\n\n      dispatch(setPosts(preparedPosts));\n      dispatch(setLoaded());\n    } catch (error) {\n      dispatch(setErrorMessage(`Error occurred when loading data: ${error}`));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport cn from 'classnames';\n\nimport { isLoading, loadPosts } from '../../store';\n\nexport const Load = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  return (\n    <button\n      type=\"button\"\n      className={cn('button', {\n        'is-loading': loading,\n        'is-primary': loading,\n      })}\n      onClick={() => dispatch(loadPosts())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteComment } from '../../store';\n\ninterface Props {\n  id: number;\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport const CommentItem: React.FC<Props> = ({\n  id,\n  postId,\n  name,\n  email,\n  body,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"comment box is-italic is-margin-vertical\" id={`${postId}-${id}`}>\n      <strong>{name}</strong>\n      {' '}\n      <small>{email}</small>\n      <p>\n        {body}\n      </p>\n      <button\n        type=\"button\"\n        className=\"button is-danger is-rounded comment__hidden-button\"\n        onClick={() => dispatch(deleteComment(postId, id))}\n      >\n        x\n      </button>\n    </div>\n  )\n};\n","import React from 'react';\n\nimport './CommentList.scss';\nimport { CommentItem } from './CommentItem';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <ul>\n      {comments.map((comment) => (\n        <li key={comment.id}>\n          <CommentItem {...comment} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { CommentList } from '../Comments';\n\ninterface Props {\n  id: number;\n  title: string;\n  body: string;\n  author?: User;\n  comments?: Comment[];\n}\n\nexport const PostItem: React.FC<Props> = ({\n  id,\n  title,\n  body,\n  author,\n  comments,\n}) => {\n\n  return (\n    <article className=\"message is-primary\" id={`${id}`}>\n      <div className=\"message-header\">\n        <h1 className=\"title has-text-white is-capitalized is-4\">\n          {title}\n        </h1>\n      </div>\n      <div className=\"message-body\">\n        {author && (\n          <h2 className=\"subtitle\">\n            {`Author: ${author.username}`}\n          </h2>\n        )}\n        {body}\n        {comments && <CommentList comments={comments} />}\n      </div>\n    </article>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { PostItem } from './PostItem';\nimport { getPosts } from '../../store';\n\nexport const PostList = () => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query')?.toLowerCase() || '';\n  const posts: Post[] = useSelector(getPosts);\n\n  const searchedPosts = useMemo(\n    () => posts.filter((post: Post) => (`${post.title} ${post.body}`)\n      .replace(/\\s*/g, ' ')\n      .includes(query.replace(/\\s*/g, ' '))),\n    [query, posts],\n  );\n\n  return (\n    <>\n      {searchedPosts.map((post: Post) => (\n        <PostItem {...post} key={post.id} />\n      ))}\n    </>\n  );\n};\n","import React, { useState, useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport { debounce } from '../../helpers';\n\nexport const Search = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query')?.toLowerCase() || '';\n  const [visibleQuery, setVisibleQuery] = useState(query);\n\n  const updateQuery = useCallback(debounce(\n    (actualQuery: string): void => {\n      if (actualQuery === '') {\n        searchParams.delete('query');\n      } else {\n        searchParams.set('query', actualQuery);\n      }\n\n      history.push({ search: searchParams.toString() });\n    },\n    1000,\n  ), []);\n\n  const handleQueryUpdate = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    updateQuery(value);\n    setVisibleQuery(value);\n  };\n\n  return (\n    <div className=\"field\">\n      <div className=\"control\">\n        <input\n          className=\"input is-primary\"\n          type=\"text\"\n          placeholder=\"Input text\"\n          value={visibleQuery}\n          onChange={handleQueryUpdate}\n        />\n      </div>\n    </div>\n  );\n};\n","export const debounce = (f: (value: string) => void, delay: number) => {\n  let timerId: number;\n\n  return (...args: any) => {\n    clearTimeout(timerId);\n    timerId = window.setTimeout(f, delay, ...args);\n  };\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { Load } from './components/Load';\nimport { PostList } from './components/PostList';\nimport { Search } from './components/Search';\n\nimport { isLoaded } from './store';\n\nconst App = () => {\n  const loaded = useSelector(isLoaded);\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title is-1\">Redux list of posts</h1>\n        {!loaded && <Load />}\n        {loaded && (\n          <>\n            <Search />\n            <PostList />\n          </>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}