{"version":3,"sources":["store/loading.ts","store/loaded.ts","store/error.ts","store/posts.ts","store/users.ts","store/comments.ts","helpers/api.ts","store/index.ts","components/Load/Load.tsx","components/Comments/CommentItem.tsx","components/Comments/CommentList.tsx","components/PostList/PostItem.tsx","components/PostList/PostList.tsx","components/Search/Search.tsx","helpers/debounce.ts","App.tsx","index.tsx"],"names":["reducer","loading","action","type","loaded","errorMessage","setPosts","posts","setUsers","users","setComments","comments","filter","comment","id","commentId","API_URL","getData","url","a","fetch","response","json","rootReducer","combineReducers","loadingReducer","loadedReducer","errordReducer","postReducer","userReducer","commentReducer","isLoading","state","isLoaded","getPosts","getUsers","getComments","store","createStore","composeWithDevTools","applyMiddleware","thunk","Load","dispatch","useDispatch","useSelector","className","cn","onClick","Promise","all","disabled","CommentItem","postId","name","email","body","CommentList","postComments","map","key","PostItem","title","userId","author","find","user","username","PostList","location","useLocation","query","URLSearchParams","search","get","toLowerCase","searchedPosts","useMemo","post","replace","includes","Search","history","useHistory","searchParams","useState","visibleQuery","setVisibleQuery","updateQuery","useCallback","f","delay","timerId","clearTimeout","args","window","setTimeout","debounce","actualQuery","delete","set","push","toString","placeholder","value","onChange","e","target","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89279591.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst LOADED = 'LOADED';\n\nexport const setLoaded = () => ({ type: LOADED });\n\nconst reducer = (loaded = false, action: AnyAction) => {\n  switch (action.type) {\n    case LOADED:\n      return true;\n\n    default:\n      return loaded;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\n\nexport const setErrorMessage = (errorMessage: string) => ({\n  type: SET_ERROR_MESSAGE,\n  errorMessage,\n});\n\nconst reducer = (errorMessage = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_ERROR_MESSAGE:\n      return action.errorMessage;\n\n    default:\n      return errorMessage;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\n\nexport const setPosts = (posts: Post[]) => ({\n  type: SET_POSTS,\n  posts,\n});\n\nconst reducer = (posts = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_USERS = 'SET_USERS';\n\nexport const setUsers = (users: User[]) => ({\n  type: SET_USERS,\n  users,\n});\n\nconst reducer = (users = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_USERS:\n      return action.users;\n\n    default:\n      return users;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\nconst SET_COMMENTS = 'SET_COMMENTS';\nconst DELETE_COMMENT = 'DELETE_COMMENT';\n\nexport const setComments = (comments: Comment[]) => ({\n  type: SET_COMMENTS,\n  comments,\n});\n\nexport const deleteComment = (commentId: number) => ({\n  type: DELETE_COMMENT,\n  commentId,\n});\n\nconst reducer = (comments = [], action: AnyAction) => {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return action.comments;\n\n    case DELETE_COMMENT:\n      return comments.filter((comment: Comment) => comment.id !== action.commentId);\n\n    default:\n      return comments;\n  }\n};\n\nexport default reducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nexport async function getData<T>(url: string): Promise<T[]> {\n  const response = await fetch(`${API_URL}/${url}`);\n  const json = await response.json();\n\n  return json;\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport loadedReducer, { setLoaded } from './loaded';\nimport errordReducer, { setErrorMessage } from './error';\nimport postReducer, { setPosts } from './posts';\nimport userReducer, { setUsers } from './users';\nimport commentReducer, { setComments, deleteComment } from './comments';\nimport { getData } from '../helpers/api';\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  loaded: loadedReducer,\n  errorMessage: errordReducer,\n  posts: postReducer,\n  users: userReducer,\n  comments: commentReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const isLoading = (state: RootState) => state.loading;\nexport const isLoaded = (state: RootState) => state.loaded;\nexport const getError = (state: RootState) => state.errorMessage;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getUsers = (state: RootState) => state.users;\nexport const getComments = (state: RootState) => state.comments;\nexport { deleteComment };\n\nexport const loadPosts = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const [posts, users, comments] = await Promise.all([\n        getData<PostFromServer>('posts.json'),\n        getData<User>('users.json'),\n        getData<Comment>('comments.json'),\n      ]);\n\n      dispatch(setPosts(posts));\n      dispatch(setUsers(users));\n      dispatch(setComments(comments));\n      dispatch(setLoaded());\n    } catch (error) {\n      dispatch(setErrorMessage(`Error occurred when loading data: ${error}`));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport cn from 'classnames';\n\nimport { isLoading, loadPosts } from '../../store';\n\nexport const Load = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  return (\n    <button\n      type=\"button\"\n      className={cn('button', {\n        'is-loading': loading,\n        'is-primary': loading,\n      })}\n      onClick={() => dispatch(loadPosts())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteComment } from '../../store';\n\ninterface Props {\n  id: number;\n  postId: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport const CommentItem: React.FC<Props> = ({\n  id,\n  postId,\n  name,\n  email,\n  body,\n}) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"comment box is-italic is-margin-vertical\" id={`${postId}-${id}`}>\n      <strong>{name}</strong>\n      {' '}\n      <small>{email}</small>\n      <p>\n        {body}\n      </p>\n      <button\n        type=\"button\"\n        className=\"button is-danger is-rounded comment__hidden-button\"\n        onClick={() => dispatch(deleteComment(id))}\n      >\n        x\n      </button>\n    </div>\n  )\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './CommentList.scss';\nimport { CommentItem } from './CommentItem';\nimport { getComments } from '../../store';\n\ninterface Props {\n  postId: number;\n}\n\nexport const CommentList: React.FC<Props> = ({ postId }) => {\n  const comments: Comment[] = useSelector(getComments);\n  const postComments = [...comments].filter(comment => comment.postId === postId);\n\n  return (\n    <ul>\n      {postComments.map((comment) => (\n        <li key={comment.id}>\n          <CommentItem {...comment} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { CommentList } from '../Comments';\nimport { getUsers } from '../../store';\n\ninterface Props {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n}\n\nexport const PostItem: React.FC<Props> = ({\n  id,\n  title,\n  body,\n  userId,\n}) => {\n  const users: User[] = useSelector(getUsers);\n  const author = users.find(user => user.id === userId);\n\n  return (\n    <article className=\"message is-primary\" id={`${id}`}>\n      <div className=\"message-header\">\n        <h1 className=\"title has-text-white is-capitalized is-4\">\n          {title}\n        </h1>\n      </div>\n      <div className=\"message-body\">\n        {author && (\n          <h2 className=\"subtitle\">\n            {`Author: ${author.username}`}\n          </h2>\n        )}\n        {body}\n        <CommentList postId={id} />\n      </div>\n    </article>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { PostItem } from './PostItem';\nimport { getPosts } from '../../store';\n\nexport const PostList = () => {\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query')?.toLowerCase() || '';\n  const posts: Post[] = useSelector(getPosts);\n\n  const searchedPosts = useMemo(\n    () => posts.filter((post: Post) => (`${post.title} ${post.body}`)\n      .replace(/\\s*/g, ' ')\n      .includes(query.replace(/\\s*/g, ' '))),\n    [query, posts],\n  );\n\n  return (\n    <>\n      {searchedPosts.map((post: Post) => (\n        <PostItem {...post} key={post.id} />\n      ))}\n    </>\n  );\n};\n","import React, { useState, useCallback } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\nimport { debounce } from '../../helpers';\n\nexport const Search = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const query = searchParams.get('query')?.toLowerCase() || '';\n  const [visibleQuery, setVisibleQuery] = useState(query);\n\n  const updateQuery = useCallback(debounce(\n    (actualQuery: string): void => {\n      if (actualQuery === '') {\n        searchParams.delete('query');\n      } else {\n        searchParams.set('query', actualQuery);\n      }\n\n      history.push({ search: searchParams.toString() });\n    },\n    1000,\n  ), []);\n\n  const handleQueryUpdate = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n\n    updateQuery(value);\n    setVisibleQuery(value);\n  };\n\n  return (\n    <div className=\"field\">\n      <div className=\"control\">\n        <input\n          className=\"input is-primary\"\n          type=\"text\"\n          placeholder=\"Input text\"\n          value={visibleQuery}\n          onChange={handleQueryUpdate}\n        />\n      </div>\n    </div>\n  );\n};\n","export const debounce = (f: (value: string) => void, delay: number) => {\n  let timerId: number;\n\n  return (...args: any) => {\n    clearTimeout(timerId);\n    timerId = window.setTimeout(f, delay, ...args);\n  };\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { Load } from './components/Load';\nimport { PostList } from './components/PostList';\nimport { Search } from './components/Search';\n\nimport { isLoaded } from './store';\n\nconst App = () => {\n  const loaded = useSelector(isLoaded);\n\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title is-1\">Redux list of posts</h1>\n        {!loaded && <Load />}\n        {loaded && (\n          <>\n            <Search />\n            <PostList />\n          </>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}